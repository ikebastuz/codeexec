// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getCodeExecutionResult = `-- name: GetCodeExecutionResult :one
SELECT id, code, language, encoded_code, stdout, stderr, error, build_duration, exec_duration, created_at FROM code_execution_results
WHERE encoded_code = $1 AND language = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetCodeExecutionResultParams struct {
	EncodedCode string
	Language    string
}

func (q *Queries) GetCodeExecutionResult(ctx context.Context, arg GetCodeExecutionResultParams) (CodeExecutionResult, error) {
	row := q.db.QueryRowContext(ctx, getCodeExecutionResult, arg.EncodedCode, arg.Language)
	var i CodeExecutionResult
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Language,
		&i.EncodedCode,
		&i.Stdout,
		&i.Stderr,
		&i.Error,
		&i.BuildDuration,
		&i.ExecDuration,
		&i.CreatedAt,
	)
	return i, err
}

const insertCodeExecutionResult = `-- name: InsertCodeExecutionResult :one
INSERT INTO code_execution_results (
    code, language, encoded_code, stdout, stderr, error, build_duration, exec_duration
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at
`

type InsertCodeExecutionResultParams struct {
	Code          string
	Language      string
	EncodedCode   string
	Stdout        sql.NullString
	Stderr        sql.NullString
	Error         sql.NullString
	BuildDuration sql.NullFloat64
	ExecDuration  sql.NullFloat64
}

type InsertCodeExecutionResultRow struct {
	ID        int32
	CreatedAt sql.NullTime
}

func (q *Queries) InsertCodeExecutionResult(ctx context.Context, arg InsertCodeExecutionResultParams) (InsertCodeExecutionResultRow, error) {
	row := q.db.QueryRowContext(ctx, insertCodeExecutionResult,
		arg.Code,
		arg.Language,
		arg.EncodedCode,
		arg.Stdout,
		arg.Stderr,
		arg.Error,
		arg.BuildDuration,
		arg.ExecDuration,
	)
	var i InsertCodeExecutionResultRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
